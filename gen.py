#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
from datetime import datetime, timedelta
import pytz
import json

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# 1. Lista de lugares (sin cambios)
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
places = [
    {"Lugar": "ðŸ‡¬ðŸ‡§ (London)", "CC": "51.5012,-0.1397"},
    {"Lugar": "ðŸ‡®ðŸ‡¨ (Las Palmas)", "CC": "28.1287,-15.4516"},
    {"Lugar": "ðŸ‡ªðŸ‡¸ (Barcelona)", "CC": "41.4043,2.1757"},
    {"Lugar": "ðŸ‡­ðŸ‡º (Budapest)", "CC": "47.5298,19.0515"},
    {"Lugar": "ðŸ‡­ðŸ‡· (Zagreb)", "CC": "45.8104,15.9782"},
    {"Lugar": "ðŸ‡²ðŸ‡° (Skopie)", "CC": "42.0057,21.4212"},
    {"Lugar": "ðŸ‡±ðŸ‡§ (Beirut)", "CC": "33.8937,35.4902"},
    {"Lugar": "ðŸ‡¬ðŸ‡· (Atenas)", "CC": "37.9726,23.7372"},
    {"Lugar": "ðŸ‡¹ðŸ‡· (Izmir)", "CC": "38.4634,27.2163"},
    {"Lugar": "ðŸ‡¦ðŸ‡ª (Dubai)", "CC": "25.0774,55.1336"},
    {"Lugar": "ðŸ‡¸ðŸ‡¨ (Victoria)", "CC": "-4.6203,55.4526"},
    {"Lugar": "ðŸ‡¹ðŸ‡² (Ashgabat)", "CC": "6.9129,79.8612"},
    {"Lugar": "ðŸ‡§ðŸ‡¹ (Thimphu)", "CC": "27.5004,89.6398"},
    {"Lugar": "ðŸ‡¹ðŸ‡­ (Bangkok)", "CC": "13.7336,100.4970"},
    {"Lugar": "ðŸ‡¹ðŸ‡¼ (TaipÃ©i)", "CC": "25.0422,121.5067"},
    {"Lugar": "ðŸ‡¨ðŸ‡³ (Hong Kong)", "CC": "22.2777,114.1620"},
    {"Lugar": "ðŸ‡¯ðŸ‡µ (Tokio)", "CC": "35.6892,139.6978"},
    {"Lugar": "ðŸ‡°ðŸ‡· (Busan)", "CC": "35.1555,129.0591"},
    {"Lugar": "ðŸ‡¬ðŸ‡º (Tamuning)", "CC": "13.5135,144.8057"},
    {"Lugar": "ðŸ‡¦ðŸ‡º (Sydney)", "CC": "-33.8630,151.2153"},
    {"Lugar": "ðŸ‡«ðŸ‡¯ (Suva)", "CC": "-18.1465,178.4245"},
    {"Lugar": "ðŸ‡³ðŸ‡¿ (Wellington)", "CC": "-41.2824,174.7691"},
    {"Lugar": "ðŸ‡°ðŸ‡® (London)", "CC": "1.9871,-157.4771"},
    {"Lugar": "ðŸ‡¼ðŸ‡¸ (Apia)", "CC": "-13.8313,-171.7664"},
    {"Lugar": "ðŸ‡¨ðŸ‡» (Praia)", "CC": "14.9184,-23.5085"},
    {"Lugar": "ðŸ‡¬ðŸ‡± (Nuuk)", "CC": "64.1741,-51.7385"},
    {"Lugar": "ðŸ‡§ðŸ‡· (SÃ£o Paulo)", "CC": "-23.5842,-46.6594"},
    {"Lugar": "ðŸ‡¨ðŸ‡± (Santiago)", "CC": "-33.4357,-70.6409"},
    {"Lugar": "ðŸ‡¦ðŸ‡· (Buenos Aires)", "CC": "-34.6177,-58.4328"},
    {"Lugar": "ðŸ‡±ðŸ‡¨ (Castries)", "CC": "14.0107,-60.9887"},
    {"Lugar": "ðŸ‡ºðŸ‡¸ (NY)", "CC": "40.7828,-73.9653"},
    {"Lugar": "ðŸ‡³ðŸ‡« (Kingston)", "CC": "-29.0569,167.9593"},
    {"Lugar": "ðŸ‡ªðŸ‡¨ (Quito)", "CC": "-0.1838,-78.4846"},
    {"Lugar": "ðŸ‡µðŸ‡ª (Lima)", "CC": "-12.0627,-77.0362"},
    {"Lugar": "ðŸ‡ºðŸ‡¸ (Colorado)", "CC": "39.7392,-104.9902"},
    {"Lugar": "ðŸ‡ºðŸ‡¸ (Nuevo Mexico)", "CC": "35.0851,-106.6499"},
    {"Lugar": "ðŸ‡ºðŸ‡¸ (Denver)", "CC": "39.7504,-104.9532"},
    {"Lugar": "ðŸ‡ºðŸ‡¸ (San Francisco)", "CC": "37.8086,-122.4098"},
    {"Lugar": "ðŸ‡ºðŸ‡¸ (Downtown Anchorage)", "CC": "61.2167,-149.8923"},
    {"Lugar": "ðŸ‡ºðŸ‡¸ (Honolulu)", "CC": "21.2709,-157.8181"},
    {"Lugar": "ðŸ‡¦ðŸ‡¸ (Pago Pago)", "CC": "-14.2779,-170.6882"},
    {"Lugar": "ðŸ‡ºðŸ‡¸ (Howland)", "CC": "0.8072,-176.6177"}
]

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# 2. Mapeo Lugar â†’ zona horaria de pytz
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
timezone_map = {
    "ðŸ‡¬ðŸ‡§ (London)": "Europe/London",
    "ðŸ‡®ðŸ‡¨ (Las Palmas)": "Atlantic/Canary",
    "ðŸ‡ªðŸ‡¸ (Barcelona)": "Europe/Madrid",
    "ðŸ‡­ðŸ‡º (Budapest)": "Europe/Budapest",
    "ðŸ‡­ðŸ‡· (Zagreb)": "Europe/Zagreb",
    "ðŸ‡²ðŸ‡° (Skopie)": "Europe/Skopje",
    "ðŸ‡±ðŸ‡§ (Beirut)": "Asia/Beirut",
    "ðŸ‡¬ðŸ‡· (Atenas)": "Europe/Athens",
    "ðŸ‡¹ðŸ‡· (Izmir)": "Europe/Istanbul",
    "ðŸ‡¦ðŸ‡ª (Dubai)": "Asia/Dubai",
    "ðŸ‡¸ðŸ‡¨ (Victoria)": "Indian/Mahe",
    "ðŸ‡¹ðŸ‡² (Ashgabat)": "Asia/Ashgabat",
    "ðŸ‡§ðŸ‡¹ (Thimphu)": "Asia/Thimphu",
    "ðŸ‡¹ðŸ‡­ (Bangkok)": "Asia/Bangkok",
    "ðŸ‡¹ðŸ‡¼ (TaipÃ©i)": "Asia/Taipei",
    "ðŸ‡¨ðŸ‡³ (Hong Kong)": "Asia/Hong_Kong",
    "ðŸ‡¯ðŸ‡µ (Tokio)": "Asia/Tokyo",
    "ðŸ‡°ðŸ‡· (Busan)": "Asia/Seoul",
    "ðŸ‡¬ðŸ‡º (Tamuning)": "Pacific/Guam",
    "ðŸ‡¦ðŸ‡º (Sydney)": "Australia/Sydney",
    "ðŸ‡«ðŸ‡¯ (Suva)": "Pacific/Fiji",
    "ðŸ‡³ðŸ‡¿ (Wellington)": "Pacific/Auckland",
    "ðŸ‡°ðŸ‡® (London)": "Pacific/Kiritimati",
    "ðŸ‡¼ðŸ‡¸ (Apia)": "Pacific/Apia",
    "ðŸ‡¨ðŸ‡» (Praia)": "Atlantic/Cape_Verde",
    "ðŸ‡¬ðŸ‡± (Nuuk)": "America/Godthab",
    "ðŸ‡§ðŸ‡· (SÃ£o Paulo)": "America/Sao_Paulo",
    "ðŸ‡¨ðŸ‡± (Santiago)": "America/Santiago",
    "ðŸ‡¦ðŸ‡· (Buenos Aires)": "America/Argentina/Buenos_Aires",
    "ðŸ‡±ðŸ‡¨ (Castries)": "America/St_Lucia",
    "ðŸ‡ºðŸ‡¸ (NY)": "America/New_York",
    "ðŸ‡³ðŸ‡« (Kingston)": "Pacific/Norfolk",
    "ðŸ‡ªðŸ‡¨ (Quito)": "America/Guayaquil",
    "ðŸ‡µðŸ‡ª (Lima)": "America/Lima",
    "ðŸ‡ºðŸ‡¸ (Colorado)": "America/Denver",
    "ðŸ‡ºðŸ‡¸ (Nuevo Mexico)": "America/Denver",
    "ðŸ‡ºðŸ‡¸ (Denver)": "America/Denver",
    "ðŸ‡ºðŸ‡¸ (San Francisco)": "America/Los_Angeles",
    "ðŸ‡ºðŸ‡¸ (Downtown Anchorage)": "America/Anchorage",
    "ðŸ‡ºðŸ‡¸ (Honolulu)": "Pacific/Honolulu",
    "ðŸ‡¦ðŸ‡¸ (Pago Pago)": "Pacific/Pago_Pago",
    # Howland no existe en pytz â‡’ lo tratamos aparte
    "ðŸ‡ºðŸ‡¸ (Howland)": None
}

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# 3. Helpers
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def calc_gmt_offset(tz_name: str, lugar: str) -> str:
    """Devuelve la cadena 'GMTÂ±X'."""
    # Caso especial Howland (GMT-12)
    if lugar == "ðŸ‡ºðŸ‡¸ (Howland)":
        return "GMT-12"
    try:
        tz = pytz.timezone(tz_name)
        now = datetime.now(tz)
        offset = now.utcoffset()            # timedelta
        hours = int(offset.total_seconds() // 3600)
        return f"GMT{hours:+d}"
    except Exception:
        return "GMT Unknown"

def local_datetime_str(lugar: str, tz_name: str) -> str:
    """Devuelve fecha+hora local 'YYYY-MM-DD HH:MM' o 'Desconocida'."""
    # Howland: UTC-12 â†’ UTC ahora menos 12 h
    if lugar == "ðŸ‡ºðŸ‡¸ (Howland)":
        now = datetime.utcnow() - timedelta(hours=12)
        return now.strftime("%Y-%m-%d %H:%M")
    try:
        tz = pytz.timezone(tz_name)
        now = datetime.now(tz)
        return now.strftime("%Y-%m-%d %H:%M")
    except Exception:
        return "Desconocida"

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# 4. Agrupar por GMT, aÃ±adiendo FechaHoraLocal
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
grouped_by_gmt: dict[str, list[dict]] = {}

for place in places:
    lugar = place["Lugar"]
    tz_name = timezone_map.get(lugar)
    gmt = calc_gmt_offset(tz_name, lugar) if tz_name else "GMT Unknown"
    fecha_hora_local = local_datetime_str(lugar, tz_name)

    entry = {
        "Lugar": lugar,
        "CC": place["CC"],
        "FechaHoraLocal": fecha_hora_local
    }

    grouped_by_gmt.setdefault(gmt, []).append(entry)

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# 5. Guardar a JSON en carpeta 'temp'
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
temp_folder = "temp"
os.makedirs(temp_folder, exist_ok=True)
json_file_path = os.path.join(temp_folder, "datalugares.json")

with open(json_file_path, "w", encoding="utf-8") as fp:
    json.dump(grouped_by_gmt, fp, ensure_ascii=False, indent=2)

print(f"âœ… Datos guardados en: {json_file_path}")
